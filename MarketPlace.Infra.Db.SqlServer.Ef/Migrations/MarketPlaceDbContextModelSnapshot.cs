// <auto-generated />
using System;
using MarketPlace.Infra.Db.SqlServer.Ef;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketPlace.Infra.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(MarketPlaceDbContext))]
    partial class MarketPlaceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Address.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_City");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Address.MainAddress", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Address");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Address");

                    b.HasIndex("CityId");

                    b.ToTable("MainAddresses", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Address.Province", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id")
                        .HasName("PK_Province");

                    b.ToTable("Provinces", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Admin.Admin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("PersonalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id")
                        .HasName("PK_Admin");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Auction.Auction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BootId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_BoothProductsAction");

                    b.HasIndex("ProductId");

                    b.ToTable("Actions", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Auction.AuctionProposal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AuctionProposals", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.Booth", b =>
                {
                    b.Property<int>("SalerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ShopAddressId")
                        .HasColumnType("int");

                    b.HasKey("SalerId")
                        .HasName("PK_Booth");

                    b.HasIndex("ShopAddressId");

                    b.ToTable("Booths", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProduct", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_BoothProducts");

                    b.HasIndex("BoothId");

                    b.HasIndex("ProductId");

                    b.ToTable("BoothProducts", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProductsPrice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BoothProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("BoothProductId");

                    b.ToTable("BoothProductsPrices", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.Comment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BoothProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Satisfaction")
                        .HasColumnType("tinyint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Comment");

                    b.HasIndex("BoothProductId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Comments", null, t =>
                        {
                            t.HasCheckConstraint("0 to 5", "([Satisfaction]<=(5) AND [Satisfaction]>=(0))");
                        });
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._CustomAttribute.CustomAttributeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_CustomAttributeTemlate");

                    b.HasIndex("CategoryId");

                    b.ToTable("CustomAttributeTemplates", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._CustomAttribute.ProductsCustomAttribute", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ProductCustomAttribute");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable(" ProductsCustomAttributes", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Customer.Customer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("BuyedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Order");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderLines", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Order.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BoothProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_OrderLine");

                    b.HasIndex("BoothProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLine");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Picture.AuctionPicture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("PictureId");

                    b.ToTable("AuctionPictures", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Picture.Picture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Alt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Pictures", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Picture.ProductCustomerPic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BoothProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_CustomerProductPices");

                    b.HasIndex("BoothProductId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PictureId");

                    b.ToTable("ProductCustomerPics", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Picture.ProductSalerPic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BoothProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_SalerProductPic");

                    b.HasIndex("BoothProductId");

                    b.HasIndex("PictureId");

                    b.ToTable("ProductSalerPics", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Prodoct.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Prodoct.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Saler.Saler", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SalerTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Saler");

                    b.HasIndex("SalerTypeId");

                    b.ToTable("Salers", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Saler.SalerType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte>("TaskPercent")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("SalerTypes", null, t =>
                        {
                            t.HasCheckConstraint("0 to 100", "([TaskPercent]<=(100) AND [TaskPercent]>=(0))");
                        });
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Address.City", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Address.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK_City_Provience");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Address.MainAddress", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Address.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Auction.Auction", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Prodoct.Product", "Product")
                        .WithMany("BoothProductsActions")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_BoothProductsAction_Peoducts");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Auction.AuctionProposal", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Auction.Auction", "Auction")
                        .WithMany("AuctionProposals")
                        .HasForeignKey("AuctionId")
                        .IsRequired()
                        .HasConstraintName("FK_ActionProposals_BoothProductsAction");

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Customer.Customer", "Customer")
                        .WithMany("ActionProposals")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_ActionProposals_Customers");

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.Booth", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Saler.Saler", "Saler")
                        .WithOne("Booth")
                        .HasForeignKey("MarketPlace.Domain.Core.Application.Entities._Booth.Booth", "SalerId")
                        .IsRequired()
                        .HasConstraintName("FK_Booth_Saler");

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Address.MainAddress", "ShopAddress")
                        .WithMany("Booths")
                        .HasForeignKey("ShopAddressId")
                        .HasConstraintName("FK_Booth_Address");

                    b.Navigation("Saler");

                    b.Navigation("ShopAddress");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProduct", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Booth.Booth", "Booth")
                        .WithMany("BoothsProducts")
                        .HasForeignKey("BoothId")
                        .IsRequired()
                        .HasConstraintName("FK_BoothProducts_Booth");

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Prodoct.Product", "Product")
                        .WithMany("BoothsProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_BoothProducts_Peoducts");

                    b.Navigation("Booth");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProductsPrice", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProduct", "BoothProduct")
                        .WithMany("BoothProductsPrices")
                        .HasForeignKey("BoothProductId")
                        .IsRequired()
                        .HasConstraintName("FK_BoothProductsPrices_BoothProducts");

                    b.Navigation("BoothProduct");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.Comment", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProduct", "BoothProduct")
                        .WithMany("Comments")
                        .HasForeignKey("BoothProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_BoothProducts");

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Customer.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Customers");

                    b.Navigation("BoothProduct");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._CustomAttribute.CustomAttributeTemplate", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Prodoct.Category", "Category")
                        .WithMany("CustomAttributeTemlates")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomAttributeTemlate_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._CustomAttribute.ProductsCustomAttribute", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._CustomAttribute.CustomAttributeTemplate", "Attribute")
                        .WithMany("ProductsCustomAttributes")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCustomAttribute_CustomAttributeTemlate");

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Prodoct.Product", "Product")
                        .WithMany("ProductsCustomAttributes")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCustomAttribute_Peoducts");

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Customer.Customer", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Address.MainAddress", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Customers_Address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Order.Order", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Customer.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Order.OrderLine", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProduct", "BoothProduct")
                        .WithMany("OrderLines")
                        .HasForeignKey("BoothProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderLine_BoothProducts");

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Order.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderLine_Order");

                    b.Navigation("BoothProduct");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Picture.AuctionPicture", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Auction.Auction", "Auction")
                        .WithMany("PicturesActions")
                        .HasForeignKey("AuctionId")
                        .IsRequired()
                        .HasConstraintName("FK_PicturesActions_BoothProductsAction");

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Picture.Picture", "Picture")
                        .WithMany("PicturesActions")
                        .HasForeignKey("PictureId")
                        .IsRequired()
                        .HasConstraintName("FK_PicturesActions_Pictures");

                    b.Navigation("Auction");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Picture.ProductCustomerPic", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProduct", "BoothProduct")
                        .WithMany("CustomersProductPices")
                        .HasForeignKey("BoothProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerProductPices_BoothProducts");

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Customer.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Picture.Picture", "Picture")
                        .WithMany("CustomersProductPices")
                        .HasForeignKey("PictureId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerProductPices_Pictures");

                    b.Navigation("BoothProduct");

                    b.Navigation("Customer");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Picture.ProductSalerPic", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProduct", "BoothProduct")
                        .WithMany("SalersProductPics")
                        .HasForeignKey("BoothProductId")
                        .IsRequired()
                        .HasConstraintName("FK_SalerProductPic_BoothProducts");

                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Picture.Picture", "Picture")
                        .WithMany("SalersProductPics")
                        .HasForeignKey("PictureId")
                        .IsRequired()
                        .HasConstraintName("FK_SalerProductPic_Pictures");

                    b.Navigation("BoothProduct");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Prodoct.Product", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Prodoct.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Peoducts_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Saler.Saler", b =>
                {
                    b.HasOne("MarketPlace.Domain.Core.Application.Entities._Saler.SalerType", "SalerType")
                        .WithMany("Salers")
                        .HasForeignKey("SalerTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Saler_SalerTypes");

                    b.Navigation("SalerType");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Address.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Address.MainAddress", b =>
                {
                    b.Navigation("Booths");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Address.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Auction.Auction", b =>
                {
                    b.Navigation("AuctionProposals");

                    b.Navigation("PicturesActions");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.Booth", b =>
                {
                    b.Navigation("BoothsProducts");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Booth.BoothProduct", b =>
                {
                    b.Navigation("BoothProductsPrices");

                    b.Navigation("Comments");

                    b.Navigation("CustomersProductPices");

                    b.Navigation("OrderLines");

                    b.Navigation("SalersProductPics");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._CustomAttribute.CustomAttributeTemplate", b =>
                {
                    b.Navigation("ProductsCustomAttributes");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Customer.Customer", b =>
                {
                    b.Navigation("ActionProposals");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Order.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Picture.Picture", b =>
                {
                    b.Navigation("CustomersProductPices");

                    b.Navigation("PicturesActions");

                    b.Navigation("SalersProductPics");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Prodoct.Category", b =>
                {
                    b.Navigation("CustomAttributeTemlates");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Prodoct.Product", b =>
                {
                    b.Navigation("BoothProductsActions");

                    b.Navigation("BoothsProducts");

                    b.Navigation("ProductsCustomAttributes");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Saler.Saler", b =>
                {
                    b.Navigation("Booth");
                });

            modelBuilder.Entity("MarketPlace.Domain.Core.Application.Entities._Saler.SalerType", b =>
                {
                    b.Navigation("Salers");
                });
#pragma warning restore 612, 618
        }
    }
}
